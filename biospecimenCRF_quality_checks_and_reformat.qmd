---
authors:
  - name: Martin Lindquist
  - name: Briha Ansari
---

This document goes over quality checks for the Biospecimen Collection Case Report Form (CRF). The headings in the sidebar help the user navigate to their desired content.

# Biospecimen Collection CRF Data Quality Checks

## Read in Data and write functions

### Load Libraries

```{r}
library(shiny)
library(forcats)
library(tidyverse)
library(here)
library(hablar)
library(janitor)
library(gt)
```

### Function

Write a function to remove columns where all rows have NA, this is will remove duplicate columns for the the Thoracotomy/TKA cohort

```{r}
not_all_na <- function(x) any(!is.na(x))
```

## CRF Quality checks

### Biospecimen collection Form

Read in Biospecimen collection data, We will call this bio

```{r, message=FALSE}
bio <- read_csv(here("data", "blood-draw", "blood-draw-2024-11-06.csv"))
```

Remove test records

```{r}
test_records <- c(
  "10000",
  "15000",
  "20000",
  "25000",
  "40000",
  "50000",
  "60000",
  "70000",
  "80000",
  "90000",
  "100000",
  "110000",
  "120000"
)

bio <- bio %>%
  filter(!record_id %in% test_records)
```

Create a column for cohort type called "cohort"

```{r message =FALSE}
bio <- bio %>%
  mutate(
    cohort = case_when(
      record_id >= 10000 & record_id < 15000 | record_id >= 25000 ~ "TKA",
      TRUE ~ "Thoracic"
    )
  )
```

### Data Dictionary

Read in data dictionary and remove duplicate field names

```{r message=FALSE}
bio_dict <- read_csv(here(
  "data",
  "blood-draw",
  "blood-draw-Data-Dictionary-2024-11-06.csv"
)) %>%
  distinct(field_name, .keep_all = TRUE)
```

### New field name(s)

Add the field name "cohort" to the data dictionary

```{r}
# Create field names
cohort_new_row <- data.frame(
  field_name = "cohort",
  field_type = "Character",
  field_note = "Type of surgical cohort",
  select_choices_or_calculations = "TKA,Thoracic"
)

# Add the new row after the last row

bio_dict <- bio_dict %>%
  slice(1:nrow(.)) %>%
  add_row(.after = nrow(.), !!!cohort_new_row)
```

The redcap_repeat_instance should be the same for the blood draw and current medications form. ML and BA confirmed that the following record_ids have a redcap_repeat_instance mismatch at baseline.

**TKA**

![](images/Screenshot%202025-02-03%20at%206.49.01%20PM.png)

**Thoracic**

![](images/Screenshot%202024-12-13%20at%208.16.31%20AM.png)

Proposed solution for data release 2.0: For the IDs above, we compared the time stamps of the Biospecimen collection Form CRF(s) and the Current Medications Form(s), and retained the Current Medications Form(s) with the time stamp matching or close to the Biospecimen collection Form CRF(s) dates.

```{r}
bio <- bio %>%
  filter(
    !(record_id == 10507 &
      redcap_repeat_instrument == "current_medications_v02" &
      redcap_repeat_instance == 2)
  ) %>%
  filter(
    !(record_id == 20326 &
      redcap_repeat_instrument == "current_medications_v02" &
      redcap_repeat_instance == 2)
  ) %>%
  mutate(
    redcap_repeat_instance = case_when(
      record_id == 25172 &
        redcap_repeat_instrument == "current_medications_v02" &
        redcap_repeat_instance == 1 ~
        2,
      TRUE ~ redcap_repeat_instance
    )
  ) %>%
  mutate(
    redcap_repeat_instance = case_when(
      record_id == 25204 &
        redcap_repeat_instrument == "current_medications_v02" &
        redcap_repeat_instance == 1 ~
        2,
      TRUE ~ redcap_repeat_instance
    )
  ) %>%
  filter(
    !(record_id == 25212 &
      redcap_repeat_instrument == "current_medications_v02" &
      redcap_repeat_instance == 1 |
      redcap_repeat_instance == 3)
  ) %>%
  mutate(
    redcap_repeat_instance = case_when(
      record_id == 25239 &
        redcap_repeat_instrument == "current_medications_v02" &
        redcap_repeat_instance == 1 ~
        2,
      TRUE ~ redcap_repeat_instance
    )
  ) %>%
  filter(
    !(record_id == 25094 &
      redcap_repeat_instrument == "current_medications_v02" &
      redcap_repeat_instance == 1)
  ) %>%
  mutate(
    redcap_repeat_instance = case_when(
      record_id == 25094 &
        redcap_repeat_instrument == "current_medications_v02" &
        redcap_repeat_instance == 2 ~
        1,
      TRUE ~ redcap_repeat_instance
    )
  ) %>%
  mutate(
    redcap_repeat_instance = case_when(
      record_id == 25108 &
        redcap_repeat_instrument == "current_medications_v02" &
        redcap_repeat_instance == 2 ~
        3,
      TRUE ~ redcap_repeat_instance
    )
  )
```

### TKA cohort Biospecimen collection form

```{r}
tka_bio <- bio %>%
  select(
    record_id,
    guid,
    redcap_data_access_group,
    redcap_event_name,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    starts_with("bscp"),
    blood_sample_collection_and_processing_crf_complete,
    cohort
  )
```

keep subjects from the TKA cohort, with the most recent baseline visit.

```{r}
tka_bio <- tka_bio %>%
  filter(cohort == "TKA") %>%
  filter(
    redcap_repeat_instrument == "blood_sample_collection_and_processing_crf"
  ) %>%
  filter(
    blood_sample_collection_and_processing_crf_complete == 2 &
      !is.na(redcap_repeat_instance)
  ) %>%
  group_by(record_id, redcap_event_name) %>%
  top_n(1, redcap_repeat_instance) %>%
  ungroup() %>%
  select(where(not_all_na))
```

Remove subjects that haven't come in for a visit yet i.e. No blood draw time available and 'No blood obtained' marked)

```{r}
brdata1 <- tka_bio %>%
  filter(
    bscp_sample_obtained___1 == 0 &
      blood_sample_collection_and_processing_crf_complete == 2
  )
```

#### Flag 1:

Check if there is missing info on hours since last drink.

```{r}
brflag1 <- brdata1 %>%
  filter(is.na(bscp_hrs_since_water)) %>%
  add_column(error_type = "Missing info on hours since last drink") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 2:

Check if there is missing information on hours since last food.

```{r}
brflag2 <- brdata1 %>%
  filter(is.na(bscp_hrs_since_food)) %>%
  add_column(error_type = "Missing information on hours since last food") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 3:

Check if there is missing information on hours since last caffeine intake in subjects who consume caffeine.

```{r}
brflag3 <- brdata1 %>%
  filter(is.na(bscp_hrs_since_cafstim) & bscp_caff_cups_amt != 4) %>%
  add_column(
    error_type = "Missing information on hours since last caffeine"
  ) %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 4:

Check if there is missing information the amount of caffeine.

```{r}
brflag4 <- brdata1 %>%
  filter(is.na(bscp_caff_cups_amt)) %>%
  add_column(error_type = "Missing information on the amount of caffeine") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 5:

Check if there is missing information on vaccination.

```{r}
brflag5 <- brdata1 %>%
  filter(is.na(bscp_any_vacc)) %>%
  add_column(error_type = "Missing information on vaccination") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Create Biospecimen collection form error report for the TKA cohort.

```{r}
# Specify the common prefix
br_error <- "brflag"

# Find data frames in the global environment with the specified prefix
br_list <- mget(ls(pattern = paste0("^", br_error)))

# Combine the data frames using bind_rows
br_report <- bind_rows(br_list) %>%
  pivot_wider(names_from = "error_type", values_from = "errors") %>%
  mutate_all(~ replace_na(., ""))
```

```{r}
br_report %>%
  gt() %>%
  tab_header(
    title = md("**TKA Biospecimen collection form Error Report**")
  ) %>%
  tab_options(
    table.font.size = px(12),
    column_labels.font.size = px(12)
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#F4F4F4")),
    locations = cells_body(columns = record_id)
  )
```

#### Save:

Save "tka_bio" and data dictionary as .csv files in the folder named "Reformatted"

```{r}
#| eval: false

write_csv(
  tka_bio,
  file = here::here(
    "data",
    "blood-draw",
    "Reformatted",
    "reformatted_tka_bio.csv"
  )
)

write_csv(
  bio_dict,
  file = here::here("data", "blood-draw", "Reformatted", "updated_bio_dict.csv")
)
```

### Thoracotomy Cohort Biospecimen Collection Form:

```{r}
thor_bio <- bio %>%
  select(
    record_id,
    guid,
    redcap_data_access_group,
    redcap_event_name,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    starts_with("bscp"),
    blood_sample_collection_and_processing_crf_complete,
    cohort
  )
```

keep subjects from the Thoracotomy cohort, with the most recent baseline visit.

```{r}
thor_bio <- thor_bio %>%
  filter(cohort == "Thoracic") %>%
  filter(
    redcap_repeat_instrument == "blood_sample_collection_and_processing_crf"
  ) %>%
  filter(
    blood_sample_collection_and_processing_crf_complete == 2 &
      !is.na(redcap_repeat_instance)
  ) %>%
  group_by(record_id, redcap_event_name) %>%
  top_n(1, redcap_repeat_instance) %>%
  ungroup() %>%
  select(where(not_all_na))
```

Remove subjects that haven't come in for a visit yet i.e. No blood draw time available and 'No blood obtained' marked

```{r}
tbrdata1 <- thor_bio %>%
  filter(
    bscp_sample_obtained___1 == 0 &
      blood_sample_collection_and_processing_crf_complete == 2
  )
```

#### Flag 1:

Check if there is missing information on hours since last drink.

```{r}
tbrflag1 <- tbrdata1 %>%
  filter(is.na(bscp_hrs_since_water)) %>%
  add_column(error_type = "Missing information on hours since last drink") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 2:

Check if there is missing information on hours since last food.

```{r}
tbrflag2 <- tbrdata1 %>%
  filter(is.na(bscp_hrs_since_food)) %>%
  add_column(error_type = "Missing information on hours since last food") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 3:

Check if there is missing information on hours since last caffeine intake in subjects who consume caffeine.

```{r}
tbrflag3 <- tbrdata1 %>%
  filter(is.na(bscp_hrs_since_cafstim) & bscp_caff_cups_amt != 4) %>%
  add_column(
    error_type = "Missing information on hours since last caffeine"
  ) %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 4:

Check if there is missing information on the amount of caffeine.

```{r}
tbrflag4 <- tbrdata1 %>%
  filter(is.na(bscp_caff_cups_amt)) %>%
  add_column(error_type = "Missing information on the amount of caffeine") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Flag 5:

Check if there is missing information on vaccination.

```{r}
tbrflag5 <- tbrdata1 %>%
  filter(is.na(bscp_any_vacc)) %>%
  add_column(error_type = "Missing information on vaccination") %>%
  add_column(errors = "error") %>%
  select(
    record_id,
    redcap_data_access_group,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    error_type,
    errors
  )
```

#### Create Biospecimen collection form error report for the Thoracotomy cohort.

```{r}
# Specify the common prefix
tbr_error <- "tbrflag"

# Find data frames in the global environment with the specified prefix
tbr_list <- mget(ls(pattern = paste0("^", tbr_error)))

# Combine the data frames using bind_rows
tbr_report <- bind_rows(tbr_list) %>%
  pivot_wider(names_from = "error_type", values_from = "errors") %>%
  mutate_all(~ replace_na(., ""))
```

```{r}
tbr_report %>%
  gt() %>%
  tab_header(
    title = md(
      "**Thoracotomy Cohort Biospecimen collection form Error Report**"
    )
  ) %>%
  tab_options(
    table.font.size = px(12),
    column_labels.font.size = px(12)
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#F4F4F4")),
    locations = cells_body(columns = record_id)
  )
```

#### Save:

Save "thor_bio" and data dictionary as .csv files in the folder named "Reformatted"

```{r }
#| eval: false

write_csv(
  thor_bio,
  file = here::here(
    "data",
    "blood-draw",
    "Reformatted",
    "reformatted_thor_bio.csv"
  )
)

write_csv(
  bio_dict,
  file = here::here("data", "blood-draw", "Reformatted", "updated_bio_dict.csv")
)
```

### TKA cohort Current Medications v_02 form:

```{r}
tka_meds <- bio %>%
  select(
    record_id,
    guid,
    redcap_data_access_group,
    redcap_event_name,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    starts_with("cmc"),
    current_medications_v02_complete,
    cohort
  )
```

keep subjects from the TKA cohort, with the most recent baseline visit.

```{r}
tka_meds <- tka_meds %>%
  filter(cohort == "TKA") %>%
  filter(redcap_repeat_instrument == "current_medications_v02") %>%
  filter(
    current_medications_v02_complete == 2 & !is.na(redcap_repeat_instance)
  ) %>%
  group_by(record_id, redcap_event_name) %>%
  top_n(1, redcap_repeat_instance) %>%
  ungroup() %>%
  select(where(not_all_na))
```

#### Save:

Save "tka_meds" and data dictionary as .csv files in the folder named "Reformatted"

```{r}
#| eval: false

write_csv(
  tka_meds,
  file = here::here(
    "data",
    "blood-draw",
    "Reformatted",
    "reformatted_tka_meds.csv"
  )
)
```

### Thoracotomy cohort Current Medications v_02 form:

```{r}
thor_meds <- bio %>%
  select(
    record_id,
    guid,
    redcap_data_access_group,
    redcap_event_name,
    redcap_repeat_instrument,
    redcap_repeat_instance,
    starts_with("cmc"),
    current_medications_v02_complete,
    cohort
  )
```

keep subjects from the TKA cohort, with the most recent baseline visit.

```{r}
thor_meds <- thor_meds %>%
  filter(cohort == "Thoracic") %>%
  filter(redcap_repeat_instrument == "current_medications_v02") %>%
  filter(
    current_medications_v02_complete == 2 & !is.na(redcap_repeat_instance)
  ) %>%
  group_by(record_id, redcap_event_name) %>%
  top_n(1, redcap_repeat_instance) %>%
  ungroup() %>%
  select(where(not_all_na))
```

#### Save:

Save "thor_meds" and data dictionary as .csv files in the folder named "Reformatted"

```{r}
#| eval: false

write_csv(
  thor_meds,
  file = here::here(
    "data",
    "blood-draw",
    "Reformatted",
    "reformatted_thor_meds.csv"
  )
)
```

